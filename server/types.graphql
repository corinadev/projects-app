# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  name: String
  dateOfBirth: DateTime
}

type Project @model {
  id: ID! @isUnique
  name: String
  location: String
  slug: String
  notes: String
  dueDate: DateTime  
  createdAt: DateTime!
  updatedAt: DateTime!
  phases: [Phase!]! @relation(name: "ProjectPhases")
  template: ProjectTemplate! @relation(name: "ProjectTemplate")
}

type Phase @model {
  id: ID! @isUnique
  name: String
  sortOrder: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  template: PhaseTemplate @relation(name: "PhaseTemplate")
  project: Project! @relation(name: "ProjectPhases")
  steps: [Step!]! @relation(name: "PhaseSteps")
}

type Step @model {
  id: ID! @isUnique
  name: String
  phase: Phase! @relation(name: "PhaseSteps")
  sortOrder: Int
  dueDate: DateTime  
  status: String
  owners: [Role!]! @relation(name: "StepOwners")
  template: StepTemplate @relation(name: "StepTemplate")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Role @model {
  id: ID! @isUnique
  name: String
  steps: [Step!]!  @relation(name: "StepOwners")
}

type ProjectTemplate @model {
  id: ID! @isUnique
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  phases: [PhaseTemplate!]! @relation(name: "ProjectTemplatePhases")
  projects: [Project!]! @relation(name: "ProjectTemplate")
}

type PhaseTemplate @model {
  id: ID! @isUnique
  name: String
  sortOrder: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  project: ProjectTemplate! @relation(name: "ProjectTemplatePhases")
  steps: [StepTemplate!]! @relation(name: "PhaseTemplateSteps")
  phases: [Phase!]! @relation(name: "PhaseTemplate")
}

type StepTemplate @model {
  id: ID! @isUnique
  name: String
  phase: PhaseTemplate!  @relation(name: "PhaseTemplateSteps")
  sortOrder: Int
  steps: [Step!]! @relation(name: "StepTemplate")
  createdAt: DateTime!
  updatedAt: DateTime!
}